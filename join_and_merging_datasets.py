# -*- coding: utf-8 -*-
"""Join and merging Datasets.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1R3mgkJAmhPW3b076jWt-pjnJn6aWu-ZC
"""

import pandas as pd
import numpy as np

"""## I. Joining by common columns

### 1.1 Merge one-to-one
"""

df_1 = pd.DataFrame(
    {
        'employee': ['Bob', 'Jake', 'Lisa', 'Sue'],
        'group': ['Accounting', 'Engineering', 'Engineering', 'HR']
    }
)

df_2 = pd.DataFrame(
    {
        'employee': ['Lisa', 'Bob', 'Jake', 'Sue'],
        'hire_date': [2004, 2008, 2012, 2014]
    }
)

print(df_1)
print(df_2)

df_3 = pd.merge(df_1, df_2)
print(df_3)

"""### 1.2 Merge many-to-one

#### 1.2.1 having the same column name
"""

df1 = pd.DataFrame({'key': ['b', 'b', 'a', 'c', 'a', 'a', 'b'], 'data1': range(7)})
df2 = pd.DataFrame({'key': ['a', 'b', 'd'], 'data2': range(3)})

print(df_1)
print(df_2)

"""the data in df1 has multiple rows labeled a and b, whereas df2 has only one row for each value in the key column."""

pd.merge(df1, df2)

pd.merge(df1, df2, how='outer')

"""#### 1.2.2 having the common collumns but different variable names"""

df3 = pd.DataFrame({'lkey': ['b', 'b', 'a', 'c', 'a', 'a', 'b'],
                    'data1': range(7)})
df4 = pd.DataFrame({'rkey': ['a', 'b', 'd'],
                    'data2': range(3)})

df3

df4

"""You may notice that the 'c' and 'd' values and associated data are missing from the result. By default merge does an 'inner' join; the keys in the result are the intersection, or the common set found in both tables. Other possible options are 'left', 'right', and 'outer'. The outer join takes the union of the keys, combining the effect of applying both left and right joins:"""

# default is inner join
pd.merge(df3, df4, left_on='lkey', right_on='rkey')

# default is inner join
pd.merge(df3, df4, left_on='data1', right_on='data2')

"""### 1.3 Many-to-many merges"""

df1 = pd.DataFrame({'key': ['b', 'b', 'a', 'c', 'a', 'b'],
                    ....: 'data1': range(6)})

df2 = pd.DataFrame({'key': ['a', 'b', 'a', 'b', 'd'],
                    ....: 'data2': range(5)})

df1

df2

"""#### inner join"""

pd.merge(df1, df2)

"""#### Left-join"""

pd.merge(df1, df2, on='key', how='left')

"""#### outer join"""

pd.merge(df1, df2, how='outer')

"""#### Right join"""

pd.merge(df1, df2, how='right')

"""### 1.4 merge with multiple keys ( more than 2 common collumns )"""

left = pd.DataFrame(
    {
        'key1': ['foo', 'foo', 'bar'],
        'key2': ['one', 'two', 'one'],
        'lval': [1, 2, 3]
    }
)

right = pd.DataFrame(
    {
        'key1': ['foo', 'foo', 'bar', 'bar'],
        'key2': ['one', 'one', 'one', 'two'],
        'rval': [4, 5, 6, 7]
    }
)

print(left)
print(right)

"""1.4.1 Merging multiple keys"""

pd.merge(left, right, on=['key1', 'key2'])

"""1.4.2 Merging by one key"""

pd.merge(left, right, on='key1')

pd.merge(left, right, on='key1', suffixes=('_left', '_right'))

"""# II. merging on index

### 2.1 merging by common index with column
"""

left1 = pd.DataFrame(
    {
        'key': ['a', 'b', 'a', 'a', 'b', 'c'],
        'value': range(6)
    }
)

right1 = pd.DataFrame({'group_val': [3.5, 7]}, index=['a', 'b'])

print(left)
print(right)

pd.merge(left1, right1, left_on='key', right_index=True)

left1.join(right1, on='key', how='inner')

"""### 2.2 merging multiple indexes and multiple columns"""

lefth = pd.DataFrame({'key1': ['Ohio', 'Ohio', 'Ohio', 'Nevada', 'Nevada'],
                      'key2': [2000, 2001, 2002, 2001, 2002],
                      'data': np.arange(5.)})

righth = pd.DataFrame(np.arange(12).reshape((6, 2)),
                      index=[['Nevada', 'Nevada', 'Ohio', 'Ohio', 'Ohio', 'Ohio'],
                             [2001, 2000, 2000, 2000, 2001, 2002]],
                      columns=['event1', 'event2'])

print(left)
print(right)

pd.merge(lefth, righth, left_on=['key1', 'key2'], right_index=True)

"""### 2.3 index-on-index merges: Multiple DataFrame"""

left2 = pd.DataFrame([[1., 2.], [3., 4.], [5., 6.]],
                     index=['a', 'c', 'e'],
                     columns=['Ohio', 'Nevada'])

right2 = pd.DataFrame([[7., 8.], [9., 10.], [11., 12.], [13, 14]],
                      index=['b', 'c', 'd', 'e'],
                      columns=['Missouri', 'Alabama'])

another = pd.DataFrame(
    [[7., 8.], [9., 10.], [11., 12.], [16., 17.]],
    index = ['a', 'c', 'e', 'f'],
    columns = ['New York', 'Oregon']
)

display(left2, right2, another)

left2.join([right2, another])

left2.join([right2, another], how='inner')

left2.join([right2, another], how='outer')
